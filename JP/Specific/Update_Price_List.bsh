import java.util.regex.*;

// We can operate both on a "with calculations" price list, and a normal price list.
Pattern calc_pattern = Pattern.compile("[\\d,]+\\.00 \\(U:([\\d,]+\\.\\d{2}) O:[\\d,]+\\.\\d{2}\\)");
Pattern default_pattern = Pattern.compile("([\\d,]+\\.00)");
Matcher m;

float percentage_increase;  // in percent
float rounding_threshold;  // the cents threshold to round down or up.

boolean show_calculations;

int caret_start = textArea.getCaretPosition();

// Let's see if we're on a line that indicates the percentage and threshold.
String s = textArea.getLineText(textArea.getCaretLine());
// Example:	2.0% increase, 0.25 threshold, noshow
Pattern p2 = Pattern.compile("([\\d.]+)% increase[^\\d.]*([\\d.]+) threshold, *(no)?show");
Matcher m2 = p2.matcher(s);
if (m2.find()) {
    percentage_increase = Float.parseFloat(m2.group(1));
    rounding_threshold = Float.parseFloat(m2.group(2));
    show_calculations = !m2.group(3).equals("no");
} else {
    try {
	percentage_increase = Float.parseFloat(Macros.input(view, "Percentage increase (example: 3.0)"));
	rounding_threshold = Float.parseFloat(Macros.input(view, "Rounding threshold (example: 0.25)"));
	show_calculations = Macros.input(view, "Show calculations? (yes/no)").equals("yes");
    } catch (Exception ex) {
    	Macros.message(view, "This isn't working out.");
    	return;
    }
}

// Okay, now we'll update the buffer.
int n = buffer.getLineCount();
StringBuilder sb = new StringBuilder(buffer.getLength() + n*2 + 8*n);

for (int i = 0; i < n; i++) {
    String line = buffer.getLineText(i);
    boolean found_price = false;
    m = calc_pattern.matcher(line);
    if (m.find()){
    	found_price = true;
    } else {
    	m = default_pattern.matcher(line);
    	if (m.find())
    	    found_price = true;
    }
    	    
    if (found_price) {
    	float oldPrice = Float.parseFloat(m.group(1).replace(",",""));
    	float newPrice = oldPrice * (1.0f +percentage_increase/100f);
    	float roundedPrice = (newPrice % 1.0f) < rounding_threshold ? Math.floor(newPrice) : Math.ceil(newPrice);
    	String replacement = show_calculations ?
    		String.format("%1.2f (U:%1.2f O:%s)", new Object[] {Float.valueOf(roundedPrice), Float.valueOf(newPrice), m.group(1)}) :
    		String.format("%1.2f", new Object[] {Float.valueOf(roundedPrice)});
    	sb.append(line.replace(m.group(), replacement));
    } else {
    	sb.append(line);
    }
    sb.append('\n');
}

textArea.setText(sb.toString());
textArea.setCaretPosition(caret_start);

Macros.message(view, "Updated Price List\n\nPercentage increase: " + percentage_increase + "\nRounding threshold: " + rounding_threshold);
