// Put this script in the "startup" directory of your jEdit settings directory.
// To reload while editing:
//     BeanShell.runScript(view,buffer.getPath(),null,false);

import java.awt.datatransfer.DataFlavor;

String getRegisterText(char reg) {
    Registers.Register r = Registers.getRegister(reg);
    if (r == null) {
	return null;
    } else {
	return r.getTransferable().getTransferData(DataFlavor.stringFlavor).toString();
    }
}

Object saveRegisterText(String regNames) {
    String [] savedRegValues = new String[regNames.length()];
    for (int i = 0; i < regNames.length(); i++)
	savedRegValues[i] = getRegisterText(regNames.charAt(i));
    Object [] saved = new Object[2];
    saved[0] = regNames;
    saved[1] = savedRegValues;
    return saved;
}

void restoreRegisterText(Object savedObj) {
    Object [] saved = (Object[])savedObj;
    String regNames = (String)saved[0];
    String [] savedRegValues = (String [])saved[1];
    for (int i = 0; i < savedRegValues.length; i++) {
	if (savedRegValues[i] != null)
	    Registers.setRegister(regNames.charAt(i), savedRegValues[i]);
	else
	    Registers.clearRegister(regNames.charAt(i));
    }
}

int boundedInt(int min, int max, int i) {
    if (min > max)
	return min;
    return Math.min(Math.max(i, min), max);
}

boolean parseBoolean(String s) {
    if (s != null && (s.equalsIgnoreCase("true") || s.equalsIgnoreCase("on") || s.equals("1") || s.equals("yes")))
	return true;
    else
	return false;
}

int parseInt(String s, int errorVal) {
    int i = 0;
    if (s != null && s.length() > 0) {
	try { i = Integer.parseInt(s); }
	catch (NumberFormatException ex) { i = errorVal; }
    }
    return i;
}

int parseInt(String s) {
    return parseInt(s, 0);
}

void wrapSelectedText(TextArea textArea, String prefix, String suffix) {
    String t = textArea.getSelectedText();
    if (t == null)
    	t = "";
    textArea.setSelectedText(prefix + t + suffix);
    if (t.isEmpty())
    	textArea.setCaretPosition(textArea.getCaretPosition() - suffix.length());
}

/**
 * Ensure that a jEdit property is set to the path of a directory or file, prompting
 * the user if required.
 * @param view View instance, as predefined in macros
 * @param propName the name of the jEdit property
 * @param isDir true if the property should be a directory
 * @return value of property, or {@code null} if user cancelled VFS browser
 */
String getPropertyPath(View view, String propName, boolean isDir) {
    String path = jEdit.getProperty(propName);
    if (path == null || path.isEmpty()) {
        String[] paths = GUIUtilities.showVFSFileDialog(view, null,
                            isDir ? VFSBrowser.CHOOSE_DIRECTORY_DIALOG : VFSBrowser.OPEN_DIALOG, false);
        if (paths == null || paths.length == 0) {
            return null;
        } else {
            path = paths[0];
            jEdit.setProperty(propName, path);
        }
    }
    return path;
}

/*
 * Define a global map that can be used to communicate among scripts.
 * See Open_Composition_File.bsh for an example of its usage.
 */
if (this.jpMap == void)
    this.jpMap = new HashMap();


/**
 * Prompt the user for a key press, save the resulting character into {@code jpMap}, and run
 * a script at a given path. If the user presses escape when prompted, the script will not be run.
 * <p/>
 * If a script is going to call itself recursively, it should first check for a value for the
 * given key in {@code jpMap}, and if the value is missing, call this method to prompt the user.
 * <p/>
 * Remember to {@code remove()} the value from the map after it's used.
 * @param view View instance, as predefined in macros
 * @param scriptPath path to the script, as in the {@code scriptPath} predefined variable
 * @param prompt prompt to show user when waiting for key press
 * @param mapKey the key in {@code jpMap} in which to save the {@code Character} that was pressed.
 */
void runScriptWithKeyPress(View view, String scriptPath, String prompt, String mapKey) {
    StringBuilder sb = new StringBuilder(256);
    sb.append("String scriptPath = \"").append(StringEscapeUtils.escapeJava(scriptPath)).append("\";\n");
    sb.append("jpMap.put(\"").append(mapKey).append("\", Character.valueOf(__char__));\n");
    sb.append("BeanShell.runScript(view, scriptPath, null, false);\n");
    view.getInputHandler().readNextChar(prompt, sb.toString());
}

