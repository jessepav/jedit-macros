import org.gjt.sp.jedit.bsh.This;
import org.apache.commons.lang3.StringUtils;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

This defineMarkdownFormatter() 
{
    // "(?: *(?:[\*\+\-:~]|(?:\d+|#)\.) +|\[\^\S{2})"
    Pattern LIST_ITEM_PATTERN = Pattern.compile("(?: *(?:[\\*\\+\\-:~]|(?:\\d+|#)\\.) +|\\[\\^\\S{2})");

    /**
     * Tests if a line is the start of some sort of list item, and if so, return the text
     * up until the end of the start pattern; otherwise return {@code null}.
     */
    String getListStartText(String s) {
        Matcher m = LIST_ITEM_PATTERN.matcher(s);
        if (m.lookingAt())
            return m.group();
        else
            return null;
    }
    
    /**
     * Returns true if a given line is a paragraph delimeter.
     */
    boolean isParagraphDelimiter(String line) {
        int n = line.length();
        return n == 0 || (line.charAt(0) == '<' && line.charAt(n-1) == '>') || StringUtils.isWhitespace(line) ||
               line.startsWith(":::");
    }

    /**
     * Returns the leading whitespace of a string.
     */
    String getLeadingWhitespace(String s) {
        for (int i = 0; i < s.length(); i++) {
            if (!Character.isWhitespace(s.charAt(i)))
                return s.substring(0, i);
        }
        // If we reach here, the string was all whitespace
        return s;
    }

    /**
     * Gets the text and line boundary information about the paragraph that holds the caret. The format
     * of the returned Object array is:
     * <pre>
     *   Index 0 - paragraph text (String)
     *   Index 1 - starting line of the paragraph (Integer)
     *   Index 2 - ending line of the paragraph (Integer)
     * </pre>
     * @return paragraph text and line boundaries
     */
    Object[] getParagraphText(JEditTextArea textArea) {
        Object[] oa = new Object[3];
        int parStartLine, parEndLine;
        String parText;

        int numLines = textArea.getLineCount();
        int currentLine = textArea.getCaretLine();

        // If the current line is all whitespace, there's nothing to be done
        if (StringUtils.isWhitespace(textArea.getLineText(currentLine))) {
            oa[0] = "";
            oa[1] = oa[2] = currentLine;
            return oa;
        }

        if (numLines == 1) {  // degenerate case
            oa[0] = textArea.getBuffer().getText();
            oa[1] = oa[2] = 0;
            return oa;
        }

        // First we scan up looking for the paragraph start line
        for (parStartLine = currentLine; parStartLine >= 0; parStartLine--) {
            String lineText = textArea.getLineText(parStartLine);
            if (getListStartText(lineText) != null) {
                break;
            } else if (isParagraphDelimiter(lineText)) {
                parStartLine++;   // the previously-scanned line is the paragraph start
                break;
            }
        }
        parStartLine = Math.max(parStartLine, 0);
        // Now scan down looking for the paragraph end line
        for (parEndLine = currentLine + 1; parEndLine < numLines; parEndLine++) {
            String lineText = textArea.getLineText(parEndLine);
            if (getListStartText(lineText) != null || isParagraphDelimiter(lineText)) {
                parEndLine--; // the previously-scanned line is the paragraph end
                break;
            }
        }
        parEndLine = Math.min(parEndLine, numLines - 1);
        int startOffset = textArea.getLineStartOffset(parStartLine);
        int endOffset = textArea.getLineEndOffset(parEndLine);
        // getLineEndOffset() always returns an offset 1 past the end of the
        // line's (non-newline) text, so we subtract 1 below
        parText = textArea.getText(startOffset, endOffset - startOffset - 1);
        oa[0] = parText;
        oa[1] = parStartLine;
        oa[2] = parEndLine;
        return oa;
    }

    /**
     * Used by formatParagraph() to reflow text.
     */
    void reflowText(String parText, StringBuilder sb, int wrapMargin, boolean isBlockquote) {
        String prefix = getListStartText(parText);
        if (prefix == null)
            prefix = getLeadingWhitespace(parText);
        int indent = prefix.length();
        String indentSpace = StringUtils.repeat(' ', indent);
        String text = parText.substring(indent).trim();
        String[] words = StringUtils.split(text);
        if (isBlockquote) {
            int pwsi = getLeadingWhitespace(prefix).length();  // prefix white-space indent
            prefix = StringUtils.repeat(' ', pwsi) + "> " + prefix.substring(pwsi);
            indentSpace = StringUtils.repeat(' ', pwsi) + "> " + StringUtils.repeat(' ', indent - pwsi);
            indent += 2;
        }
        int n = words.length;
        int col = 0;  // column at which we're inserting words
        sb.append(prefix).append(words[0]);
        col = indent + words[0].length(); 
        for (int i = 1; i < n; i++) {
            String word = words[i];
            int wordlen = word.length();
            if (col + 1 + wordlen <= wrapMargin) {
                sb.append(' ').append(word);
                col += 1 + wordlen;
            } else {  // go to a new line
                sb.append('\n').append(indentSpace).append(word);
                col = indent + wordlen;
            }
        }
    }
    
    /** Returns true if the first non-whitespace character in {@code text} is a {@code '>'}  */
    boolean checkForBlockquote(String text) {
        for (int i = 0; i < text.length(); i++) {
            char c = text.charAt(i);
            if (!Character.isWhitespace(c))
                return c == '>';
        }
        return false;
    }
    
    // (?<=(?:^|\n) *)> ?
    Pattern BLOCKQUOTE_PATTERN = Pattern.compile("(?<=(?:^|\\n) *)> ?");
    
    /**
     * Reflow selected text (if a selection is active) or the current paragraph
     * to fit within the wrapMargin.
     *
     * If wrapMargin == 0, the margin will be taken from the buffer's maxLineLen property.
     * If wrapMargin == -1, the margin will be taken from the length of the first line of
     *                      the text to wrap.
     */
    void formatParagraph(View view, JEditTextArea textArea, Buffer buffer, int wrapMargin) {
        int parStartLine = -1, parEndLine = -1;
        String parText;
        boolean usingSelection;
        boolean trailingNewline;

        String selectedText = textArea.getSelectedText();
        usingSelection = selectedText != null;
        if (usingSelection) {
            parText = selectedText;
        } else {
            Object[] parInfo = getParagraphText(textArea);
            parText = (String) parInfo[0];
            parStartLine = (Integer) parInfo[1];
            parEndLine = (Integer) parInfo[2];
        }
        if (StringUtils.isWhitespace(parText))
            return;

        trailingNewline = parText.endsWith("\n");
        int tabSize = buffer.getIntegerProperty("tabSize", 8);
        parText = parText.replace("\t", StringUtils.repeat(' ', tabSize));

        StringBuilder sb = new StringBuilder(parText.length() + 100);

        if (wrapMargin == 0) {
            wrapMargin = buffer.getIntegerProperty("maxLineLen", 72);
        } else if (wrapMargin == -1) {
            wrapMargin = parText.indexOf("\n");
            if (wrapMargin == -1)
                wrapMargin = buffer.getIntegerProperty("maxLineLen", 72);
        }
        boolean isBlockquote = checkForBlockquote(parText);
        if (isBlockquote) {
            parText = BLOCKQUOTE_PATTERN.matcher(parText).replaceAll("");
        }
        reflowText(parText, sb, wrapMargin, isBlockquote);

        // Save our reformatted text back to parText
        if (trailingNewline)
            sb.append('\n');
        parText = sb.toString();

        int caretPos = textArea.getCaretPosition();

        // Finally, modify the text of the buffer
        if (usingSelection) {
            textArea.setSelectedText(parText);
        } else {
            int startOffset = textArea.getLineStartOffset(parStartLine);
            int endOffset = textArea.getLineEndOffset(parEndLine) - 1;  // see comment in getParagraphText()
            textArea.setSelection(new Selection.Range(startOffset, endOffset));
            textArea.setSelectedText(parText);
        }

        textArea.moveCaretPosition(Math.min(caretPos, buffer.getLength()));
    }
    
    void toggleBlockquote(View view, JEditTextArea textArea, Buffer buffer) {
        int caretLine = textArea.getCaretLine();
        int lineOffset = textArea.getLineStartOffset(caretLine);
        int caretCol = textArea.getCaretPosition() - lineOffset;
        String text = textArea.getSelectedText();
        if (text == null) {
            textArea.selectParagraph();
            text = textArea.getSelectedText();
        }
        if (text == null || text.isEmpty()) {
            textArea.setSelectedText("> ");
            return;
        }
        String[] lines = StringUtils.split(text, "\r\n");
        boolean addBlock = !checkForBlockquote(lines[0]);
        int tabSize = buffer.getIntegerProperty("tabSize", 8);
        text = text.replace("\t", StringUtils.repeat(' ', tabSize));
        if (addBlock) {
            // Let's get minimum indentation
            int minIndent = text.length();
            for (String line : lines)
                minIndent = Math.min(minIndent, getLeadingWhitespace(line).length());
            for (int i = 0; i < lines.length; i++)
                lines[i] = lines[i].substring(0, minIndent) + "> " + lines[i].substring(minIndent);
            textArea.setSelectedText(StringUtils.join(lines, '\n'));
        } else {
            textArea.setSelectedText(BLOCKQUOTE_PATTERN.matcher(text).replaceAll(""));
        }
        textArea.moveCaretPosition(textArea.getLineStartOffset(caretLine) + caretCol + (addBlock ? 2 : -2));
    }
    
    return this;
}

This markdownFormatter = defineMarkdownFormatter();
unset("defineMarkdownFormatter");
