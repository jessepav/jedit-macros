/*
 * This macro registers an EditBus component that will 
 * 
 * 1. Prevent a buffer's maxLineLen and wrap properties from being changed upon a
 *    buffer-save, even if the buffer specifies these properties in its local
 *    properties.
 * 
 * You may consider adding this macro to your jEdit startup folder (it depends on
 * 00_JP_Macro_Utils.bsh, but since startup scripts are run in alphabetical order,
 * it will be run later in the startup sequence).
 */

EBComponent defineJPEditBusComponent() {
    int lineLen;
    String wrap;
    
    public void handleMessage(EBMessage msg) {
        if (msg instanceof BufferUpdate) {
            Object what = msg.getWhat();
            Buffer buffer = msg.getBuffer();
            if (what == BufferUpdate.SAVING) {
                lineLen = buffer.getIntegerProperty("maxLineLen", 0);
                wrap = buffer.getStringProperty("wrap");
            } else if (what == BufferUpdate.SAVED) {
                int len = buffer.getIntegerProperty("maxLineLen", 0);
                String w = buffer.getStringProperty("wrap");
                boolean changed = false;
                if (len != lineLen) {
                    buffer.setProperty("maxLineLen", lineLen);
                    changed = true;
                }
                if (!w.equals("wrap")) {
                    buffer.setProperty("wrap", wrap);
                    changed = true;
                }
                if (changed)
                    buffer.propertiesChanged();
            }
        }
    }
    
    return this;
}

void installJPEditBusComponent() {
    EBComponent prev = jpMap.get("JPEditBusComponent");
    if (prev != null)
        EditBus.removeFromBus(prev);
    EBComponent c = defineJPEditBusComponent();
    EditBus.addToBus(c);
    jpMap.put("JPEditBusComponent", c);
}

installJPEditBusComponent();

// We have these here in case this macro is run at startup, to avoid polluting the
// global namespace.
unset("defineJPEditBusComponent");
unset("installJPEditBusComponent");
