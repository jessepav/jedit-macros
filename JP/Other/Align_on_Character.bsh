/*******************************************************************************
* Align on Character
*
* based on the original Beautify Text Table by Corin Langosch (info@netskin.com)
* 
* Modified by jpavel@alum.mit.edu to use an arbitrary regexp to perform alignment,
* to join the columns with a configurable delimiter, to allow for different
* horizontal column alignments, and padding with other characters than spaces.
* 
* Jesse Pavel (jpavel@alum.mit.edu) - 2015/04/12
*
*******************************************************************************/

import org.apache.commons.lang3.StringUtils;

String splitRegexp = "\t";
String delimiter = " ";

boolean delimiterAtStart = false;
boolean delimiterAtEnd = false;
boolean trimSpace = false;
String colspec = "";
char paddingChar = ' ';

// parseCommandString() {{{
void parseCommandString() {
  String s = getRegisterText('|');
  if (s == null)
    return;
  
  String splitCharRE = "\\" + s.charAt(0);
  String [] parameters = s.substring(1).split(splitCharRE);
  if (parameters.length < 2)
    return;
  splitRegexp = parameters[0];
  delimiter = parameters[1];
  if (parameters.length >= 3) {
    if (parameters[2].indexOf('B') != -1)
      delimiterAtStart = true;
    if (parameters[2].indexOf('E') != -1)
      delimiterAtEnd = true;
    if (parameters[2].indexOf('T') != -1)
      trimSpace = true;
  }
  if (parameters.length >= 4) {
    colspec = parameters[3];
  }
  if (parameters.length >= 5) {
    paddingChar = parameters[4].charAt(0);
  }
} 
// }}}

// getColspec() {{{
// Note that 'col' is 0-indexed
String getColspec(int col) { 
  if (col > colspec.length() - 1)
    return "L";
  String s = colspec.substring(col, col + 1);
  if(!"LRC".contains(s))
    return "L";
  else
    return s;
}
// }}}

// prePaddingAmount() and postPaddingAmount() {{{
int prePaddingAmount(int col, int padding) {
  String align = getColspec(col);
  switch (align) {
  case "L":
    return 0;
  case "R":
    return padding;
  case "C":
    return padding / 2;
  }
}

int postPaddingAmount(int col, int padding) {
  String align = getColspec(col);
  switch (align) {
  case "L":
    return padding;
  case "R":
    return 0;
  case "C":
    return padding/2 + padding%2;
  }
}

// }}}

// --------------------------------------
// ------------- Main -------------------
// --------------------------------------
// {{{
String text = textArea.getSelectedText();
if (text != null) {
  parseCommandString();
  String[] lines = text.split("\\r?\\n");
  ArrayList rows = new ArrayList();
  ArrayList column_widths = new ArrayList();
  for (int i = 0; i < lines.length; i++) {
    String line = lines[i];
    String[] cols = line.split(splitRegexp);
    // I don't want to allow lines that don't have any split characters to mess up the sizing.
    if (cols.length > 1) {
      for (int j = 0; j < cols.length; j++) {
	cols[j] = cols[j].trim();
	Integer width = cols[j].length();
	if (column_widths.size() <= j) {
	  column_widths.add(width);
	} else {
	  if (column_widths.get(j) < width) {
	    column_widths.set(j, width);
	  }
	}
      }
    }
    rows.add(cols);
  }
  
  StringBuilder t = new StringBuilder(); // whole replacement buffer
  StringBuilder b = new StringBuilder();  // line buffer
  int num_cols = column_widths.size();
  for (int i = 0; i < rows.size(); i++) {
    b.delete(0, b.length());  // start fresh each time
    String[] cols = rows.get(i);
    if (cols.length == 1) {  // just write degenerate columns to the output
      t.append(cols[0]).append('\n');
      continue;
    }
    if (delimiterAtStart)
      b.append(delimiter);
    int n = Math.min(num_cols, cols.length);
    for (int j = 0; j < n; j++) {
      String col = cols[j];
      int width = column_widths.get(j);
      int padding = width - col.length();
      for (int k = 0; k < prePaddingAmount(j, padding); k++)
	b.append(paddingChar);
      b.append(col);
      if (delimiterAtEnd || j < n - 1) {
	for (int k = 0; k < postPaddingAmount(j, padding); k++)
	  b.append(paddingChar);
	b.append(delimiter);
      }
    }
    t.append(trimSpace ? b.toString().trim() : b);
    t.append('\n');
  }
  textArea.setSelectedText(t.toString());
} else {
  Macros.message(view, "See\n\n   https://goo.gl/di0JH2\n\n   " +
  	"(That's \"dee eye zero capital-jay capital-aitch two\")" + "\n\nfor documentation!");
}
  
// }}}

// :indentSize=2:autoIndent=simple:folding=explicit:
